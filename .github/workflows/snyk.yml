name: build
on:
  push:
    branches:
      - master
  pull_request:


jobs:


  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      new_version: ${{ steps.version.outputs.new_version }}
      JOB_STATUS: ${{ job.status }}

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read Version
        id: version
        run: |    
          current_version=$(($(cat version.txt)))
          new_version=$(($(cat version.txt)+1))

          echo "Current version: $current_version"
          echo "New version: $new_version"
          
          echo "::set-output name=current_version::$current_version" 
          echo "::set-output name=new_version::$new_version"  
        
      - name: Build an image from Dockerfile
        run: |
          docker build -t docker.io/yuva19102003/golang-webserver:v${{ steps.version.outputs.new_version }} .
          docker save -o image.tar yuva19102003/golang-webserver:v${{ steps.version.outputs.new_version }}

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar


  snyk_scan:
    name: Snyk Scan 
    runs-on: ubuntu-latest
    needs: docker_build
    outputs:
        RESULTS_LENGTH: ${{ steps.no_of_vuln.outputs.RESULTS_LENGTH }}
        JOB_STATUS: ${{ job.status }}

    steps:

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i image.tar
    
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: yuva19102003/golang-webserver:v${{ needs.docker_build.outputs.new_version }}
          args: --sarif-file-output=snyk.sarif
       
      - name: Count total number of vulnerabilities
        id: no_of_vuln
        run: |
          RESULTS_LENGTH=$(jq '.runs[0].results | length' snyk.sarif)
          echo "RESULTS_LENGTH=$RESULTS_LENGTH" >> $GITHUB_ENV
          echo $RESULTS_LENGTH
          echo "::set-output name=RESULTS_LENGTH::$RESULTS_LENGTH"

         
      - name: Pass_or_Fail_the_job
        id: result
        run: |
            if [ "$RESULTS_LENGTH" != 0 ]; then         
                echo "Job Failed"
                exit 1
            else 
                echo "Pass"
            fi 
 
  push_image:
    name: Push Image to Dockerhub
    runs-on: ubuntu-latest
    needs: docker_build
    outputs:
      JOB_STATUS: ${{ job.status }}

    steps:

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Load Docker image
        run: |
          docker load -i image.tar
       
      - name: push it to dockerhub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push yuva19102003/golang-webserver:v${{ needs.docker_build.outputs.new_version }}
          

  slack_notify:
    name: notify in slack channel
    runs-on: ubuntu-latest
    needs: [docker_build, snyk_scan, push_image]
    if: ${{ always() }}
    steps:

      - name: Send notification on Slack using Webhooks
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
               {
                 "text": "*GITHUB ACTION FROM FRONTEND TIER MICROSERVICE *\n\n*The Docker Build job Status : ${{ needs.docker_build.outputs.JOB_STATUS }}*\n*The Docker image name : yuva19102003/golang-webserver:v${{ needs.docker_build.outputs.new_version }}*\n\n*The Snyk scan job status : ${{ needs.snyk_scan.outputs.JOB_STATUS }}* \n*Number of vulnerabilities : ${{ needs.snyk_scan.outputs.RESULTS_LENGTH }}*\n\n *Push image to Dockerhub job status : ${{ needs.docker_build.outputs.JOB_STATUS}}*\n*Docker Command : docker pull yuva19102003/golang-webserver:v${{ needs.docker_build.outputs.new_version }}*\n\n*Update EKS manifest job status : * \n\n*Detail*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n"
               }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}


  
#      - name: Update Version in version.txt
#        run: |
#          echo #$#{{ steps.version.outputs.version }} > version.txt
#          git config user.name "github-actions[bot]"
#          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
#          git add .
#          git commit -m "generated"
#          git push

      
              



          
